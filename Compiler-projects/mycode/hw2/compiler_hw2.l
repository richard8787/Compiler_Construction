/* Definition section */
%{
    #include "common.h"
    #include "y.tab.h"	/* header file generated by bison */
    extern YYSTYPE yylval;

    #define YY_NO_UNPUT
    #define YY_NO_INPUT
%}


/* Define regular expression label */
letter  [a-zA-Z_]
digit [0-9]
id {letter}+({letter}|{digit})*
inumber {digit}+
fnumber ({digit}*\.{digit}+)
newline		[\n]

%x CMT
%x STR
%option yylineno

/* Rules section */
%%

"/*"        { BEGIN(CMT); }
<CMT>"*/"   { BEGIN(INITIAL); }
<CMT>\n     {;}
<CMT>.      {;}
"//".*      {;}
"\""        { BEGIN(STR);}
<STR>"\""   { BEGIN(INITIAL);}
<STR>[^\"]* { yylval.s_val = strdup(yytext);
                return STRING_LIT;
            }

"+"          { return '+'; }
"-"          { return '-'; }
"*"          { return '*'; }
"/"          { return '/'; }
"%"          { return '%'; }
">"          { return '>'; }
"<"          { return '<'; }
"!"          { return '!'; }
"="          { return '='; }

"++"         { return INC; }
"--"         { return DEC; }
">="         { return GEQ; }
"<="         { return LEQ; }
"=="         { return EQL; }
"!="         { return NEQ; }
"+="         { return ADD_ASSIGN; }
"-="         { return SUB_ASSIGN; }
"*="         { return MUL_ASSIGN; }
"/="         { return QUO_ASSIGN; }
"%="         { return REM_ASSIGN; }
"&&"         { return AND; }
"||"         { return OR; }
"("          { return LPAREN; }
")"          { return RPAREN; }
"["          { return LBRACK; }
"]"          { return RBRACK; }
"{"          { return LBRACE; }
"}"          { return RBRACE; }
","          { return COMMA; }
"\""         { return QUOTA; }

"print"      { return PRINT; }
"return"     { return RETURN; }
"if"         { return IF; }
"else"       { return ELSE; }
"for"        { return FOR; }
"while"      { return WHILE; }
"int"        { 
                strcpy(yylval.ctr.id_type,"int");
                return INT; 
             }
"float"      {
                strcpy(yylval.ctr.id_type,"float"); 
                return FLOAT; 
             }
"string"     { 
                strcpy(yylval.ctr.id_type,"string");
                return STRING; 
             }
"bool"       { 
                strcpy(yylval.ctr.id_type,"bool");
                return BOOL; 
             }
"true"       { 
                yylval.b_val = true; 
                return BOOL_LIT; 
             }
"false"      { 
                yylval.b_val = false; 
                return BOOL_LIT; 
             }
"continue"   { return CONTINUE; }
"break"      { return BREAK; }
"void"       { return VOID; }

{inumber}   { yylval.i_val = atoi(yytext);
                return INT_LIT;
            }
{fnumber}   { yylval.f_val = atof(yytext);
                return FLOAT_LIT;
            }

{id}        { yylval.ctr.id_name = strdup(yytext);
                return IDENT;
            }


[;]         { return SEMICOLON; }
[\n]        {;}
<<EOF>>     { static int once = 0;
                if (once++) {
                    yyterminate();
                }
            }
[ \t]+      {;}
.           {;}
%%
/*  C Code section */
int yywrap(void)
{
    return 1;
}